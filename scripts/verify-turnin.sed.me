#!/usr/bin/python3

##########################################################################
# The MIT License (MIT)                                                  #
#                                                                        #
# Copyright (c) 2014 Antonios A. Chariton <daknob.mac@gmail.com>         #
#                                                                        #
# Permission is hereby granted, free of charge, to any person obtaining  #
# a copy of this software and associated documentation files (the        #
# "Software"), to deal in the Software without restriction, including    #
# without limitation the rights to use, copy, modify, merge, publish,    #
# distribute, sublicense, and/or sell copies of the Software, and to     #
# permit persons to whom the Software is furnished to do so, subject to  #
# the following conditions:                                              #
#                                                                        #
# The above copyright notice and this permission notice shall be         #
# included in all copies or substantial portions of the Software.        #
#                                                                        #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  #
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE #
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION #
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  #
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        #
##########################################################################

##########################################################################
#                                                                        #
# Verifies if the current user has successfully turned in an             #
# assignment for assignment in class.                                    #
#                                                                        #
##########################################################################

import fnmatch
import getpass
import os
import re
import sys


VER = "v3.1.4"

def usage():
    print(" verify-turnin " + VER)
    print(" Usage: ")
    print(" verify-turnin assignment@course ")
    print(" \tVerify the turnin has been successful ")
    print(" verify-turnin -V ")
    print(" \tShow Copyright and Version information ")


def versionstuff():
    print(" verify-turnin " + VER)
    print(" Copyright: ")
    print(" Copyright (c) 2014 \tAntonios   A. Chariton    \t<daknob.mac@gmail.com> ")
    print(" Copyright (c) 2022 \tAlexandros K. Antonakakis \t<antonakakis1@gmail.com> ")
    print(" License: ")
    print(" The current file is licensed under the MIT License. ")
    print(" You can obtain a copy of the license here: <http://opensource.org/licenses/MIT> ")
    print(" Development: ")
    print(" Source Code available on GitHub: <https://github.com/zakkak/turnin> ")

def is_dir(path):
    return os.path.exists(path) and os.path.isdir(path)


def tryint(string):
    try:
        return int(string)
    except ValueError:
        return string


def alphanum_key(string):
    """ Turn a string into a list of string and number chunks.
        "z23a" -> ["z", 23, "a"]
    """
    return [tryint(c) for c in re.split('([0-9]+)', string)]


def get_user_files(path, class_dir, assignment):
    user_files = [f
                  for files in next(os.walk(class_dir + "/TURNIN/" + assignment + path))
                  for f in fnmatch.filter(files, getpass.getuser() + '*.tgz')]
    user_files.sort(key=alphanum_key)

    return user_files


def main():

    # On improper calls, return usage information
    if len(sys.argv) != 2:
        usage()
        sys.exit(1)  # Improper Call

    # Handle version and copyright
    if sys.argv[1] == "-V" or sys.argv[1] == "-v":
        versionstuff()
        sys.exit(0)

    # Check if the argument supplied is indeed "properly" formatted
    if not ("@" in sys.argv[1]) or (sys.argv[1].count('@') != 1):
        usage()
        sys.exit(1)

    # Split the argument supplied by using @ as a delimiter
    argz = sys.argv[1].split("@")
    assignment = argz[0]  # The first field is the assignment
    course = argz[1]  # The second field is the course
    # For the others we don't *really* care that much :P

    class_dir = os.path.expanduser("~" + course)

    # Check if the user has a home directory
    if not is_dir(class_dir):
        print(" Could not find specified course ")
        sys.exit(2)  # Could not find course
    # Check if the assignment exists
    if not is_dir(class_dir + "/TURNIN/" + assignment):
        print(" Could not find assignment directory ")
        sys.exit(3)  # Could not find assignment

    grep = os.system("ls -l '" + class_dir + "/TURNIN/" + assignment +
                     "' | grep `whoami` | grep -v '#' > /dev/null 2> /dev/null")
    if grep != 0:
        grep = os.system("ls -l '" + class_dir + "/TURNIN/" + assignment +
                         "' | grep `whoami` > /dev/null 2> /dev/null")
        if grep == 0:
            print(" You have attempted to turn in " + assignment +
                  " for " + course + " but it is not valid.")
        else:
            print(" You have not turned in " + assignment + " for " + course + "! ")
            sys.exit(0)

    print(" You have successfully turned in " + assignment + " for " + course + " ")

    penalty = 0
    saveturnin_late = 0
    saveturnin_on_time = 0

    user_files = get_user_files("/late", class_dir, assignment)
    if user_files:
        numbers = re.findall(r'\d+', user_files[-1])
        saveturnin_late = int(numbers[0])
        penalty = int(numbers[-1])

    user_files = get_user_files("/on_time", class_dir, assignment)
    if user_files:
        numbers = re.findall(r'\d+', user_files[-1])
        saveturnin_on_time = int(numbers[0])

    if saveturnin_late != 0 and saveturnin_on_time > saveturnin_late:
        print("Warning! An on-time turn-in seems to be newer than a late turn-in!."
              "  Please mention this to the instructor or the TAs.")
    elif saveturnin_late > 0:
        print(" You have %d%% penalty on final grade" % penalty)


if __name__ == "__main__":
    main()
